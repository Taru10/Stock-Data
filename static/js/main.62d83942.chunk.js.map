{"version":3,"sources":["ApiConnector.js","Chart.js","App.js","reportWebVitals.js","index.js"],"names":["axiosInstance","setupCache","maxAge","store","localForage","exclude","query","axios","create","baseURL","formatStockData","stockData","Object","entries","map","date","priceData","open","Number","high","low","close","Chart","useState","setStockData","useEffect","a","symbol","get","params","function","apikey","result","data","console","log","fetchStockData","options","axisY","minimum","Math","min","maximum","max","crosshair","enabled","snapToDataPoint","axisX","scaleBreaks","spacing","fillOpacity","lineThickness","customBreaks","reduce","breaks","value","index","array","currentDataPointUnix","Date","previousDataPointUnix","oneDayInMs","startValue","endValue","type","dataPoints","x","y","App","style","display","justifyContent","width","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAYMA,GARQC,qBAAW,CACrBC,OAAQ,KACRC,MAAOC,IACPC,QAAQ,CACJC,OAAO,KAIOC,IAAMC,OAAQ,CAChCC,QAAU,uC,qDCkEd,SAASC,EAAgBC,GACrB,OAAOC,OAAOC,QAAQF,GAAWG,KAAI,SAAAD,GACjC,kBAA0BA,EAA1B,GAAOE,EAAP,KAAaC,EAAb,KAEA,MAAO,CACHD,OACAE,KAAMC,OAAOF,EAAU,YACvBG,KAAMD,OAAOF,EAAU,YACvBI,IAAKF,OAAOF,EAAU,WACtBK,MAAOH,OAAOF,EAAU,iBAKrBM,MAzFD,WACV,MAAkCC,mBAAS,IAA3C,mBAAOZ,EAAP,KAAkBa,EAAlB,KAeE,OAbFC,qBAAU,YACc,uCAAG,4BAAAC,EAAA,sEDQMC,ECPiB,ODQ3C3B,EAAc4B,IAAI,GAAI,CACzBC,OAAO,CACHC,SAAW,oBACXH,SACAI,OAAS,sBCbU,OACfC,EADe,OAGrBR,EAAad,EAAgBsB,EAAOC,KAAK,yBAEzCC,QAAQC,IAAIH,EAAOC,MALE,iCDQK,IAACN,ICRN,OAAH,qDAOpBS,KACC,IAEHF,QAAQC,IAAIxB,GAGR,cAAC,IAAD,CACE0B,QAAS,CACLC,MAAQ,CACJC,QAASC,KAAKC,IAAL,MAAAD,KAAI,YAAQ7B,EAAUG,KAAI,SAAAmB,GAAI,OAAEA,EAAKb,SAAM,IACpDsB,QAAqD,IAA5CF,KAAKG,IAAL,MAAAH,KAAI,YAAQ7B,EAAUG,KAAI,SAAAmB,GAAI,OAAEA,EAAKd,UAC9CyB,UAAU,CACNC,SAAS,EACTC,iBAAiB,GAEzBC,MAAQ,CACJH,UAAU,CACNC,SAAS,EACTC,iBAAiB,IAErBE,YAAY,CACRC,QAAS,EACTC,YAAa,EACbC,cAAe,EACfC,aAAczC,EAAU0C,QAAO,SAACC,EAAQC,EAAOC,EAAOC,GAClD,GAAc,IAAVD,EAAa,OAAOF,EAExB,IAAMI,EAAuBxC,OAAO,IAAIyC,KAAKJ,EAAMxC,OAC7C6C,EAAwB1C,OAAO,IAAIyC,KAAKF,EAAMD,EAAM,GAAGzC,OAEvD8C,EAAa,MAGnB,OAFmBD,EAAwBF,IAErBG,EACjBP,EADE,sBAGIA,GAHJ,CAIC,CACIQ,WAAYJ,EACZK,SAAUH,EAAwBC,OAGnD,MAGP5B,KAAM,CACF,CACI+B,KAAM,cACNC,WAAYtD,EAAUG,KAAI,SAAAH,GAAS,MAAG,CAClCuD,EAAG,IAAIP,KAAKhD,EAAUI,MACtBoD,EAAG,CACCxD,EAAUM,KACVN,EAAUQ,KACVR,EAAUS,IACVT,EAAUU,iBCtD3B+C,EAXH,WAEV,OACE,qBAAKC,MAAU,CAAEC,QAAS,OAAQC,eAAiB,UAAnD,SACE,qBAAKF,MAAU,CAAEG,MAAQ,OAAzB,SACE,cAAC,EAAD,SCGOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.62d83942.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport localForage from 'localforage';\r\nimport {setupCache} from 'axios-cache-adapter';\r\n\r\nconst cache = setupCache({\r\n    maxAge: 60*60*1000,\r\n    store: localForage,\r\n    exclude:{\r\n        query: false\r\n    }\r\n});\r\n\r\nconst axiosInstance = axios.create ({\r\n    baseURL : 'https://www.alphavantage.co/query'\r\n});\r\n\r\nexport const getDailyChartForSymbol=(symbol)=>{\r\n    return axiosInstance.get('', {\r\n        params:{\r\n            function : 'TIME_SERIES_DAILY',\r\n            symbol,\r\n            apikey : 'DTRF1DVJESUY2O3Q'\r\n        }\r\n    })\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {CanvasJSChart} from 'canvasjs-react-charts';\r\nimport { getDailyChartForSymbol } from './ApiConnector';\r\n\r\nconst Chart = () => {\r\n    const [stockData, setStockData] = useState([]);\r\n\r\n    useEffect(()=>{\r\n        const fetchStockData = async() => {\r\n          const result = await getDailyChartForSymbol('TSLA');\r\n\r\n          setStockData(formatStockData(result.data['Time Series (Daily)']));\r\n    \r\n          console.log(result.data);\r\n        };\r\n        fetchStockData();\r\n      }, []);\r\n\r\n      console.log(stockData);\r\n\r\n      return (\r\n          <CanvasJSChart\r\n            options={{\r\n                axisY : {\r\n                    minimum: Math.min(...stockData.map(data=>data.low))/1.1,\r\n                    maximum: Math.max(...stockData.map(data=>data.high))*1.1,\r\n                    crosshair:{\r\n                        enabled: true,\r\n                        snapToDataPoint: true\r\n                    },\r\n                axisX : {\r\n                    crosshair:{\r\n                        enabled: true,\r\n                        snapToDataPoint: true\r\n                    }},\r\n                    scaleBreaks:{\r\n                        spacing: 0,\r\n                        fillOpacity: 0,\r\n                        lineThickness: 0,\r\n                        customBreaks: stockData.reduce((breaks, value, index, array)=>{\r\n                            if (index === 0) return breaks;\r\n\r\n                            const currentDataPointUnix = Number(new Date(value.date));\r\n                            const previousDataPointUnix = Number(new Date(array[index-1].date));\r\n\r\n                            const oneDayInMs = 86400000;\r\n                            const difference = previousDataPointUnix - currentDataPointUnix;\r\n\r\n                            return difference === oneDayInMs\r\n                                ?breaks\r\n                                :[\r\n                                    ...breaks,\r\n                                    {\r\n                                        startValue: currentDataPointUnix,\r\n                                        endValue: previousDataPointUnix - oneDayInMs\r\n                                    }\r\n                            ]\r\n                    }, [])\r\n                }\r\n                },\r\n                data: [\r\n                    {\r\n                        type: 'candlestick',\r\n                        dataPoints: stockData.map(stockData=>({\r\n                            x: new Date(stockData.date),\r\n                            y: [\r\n                                stockData.open,\r\n                                stockData.high,\r\n                                stockData.low,\r\n                                stockData.close\r\n                            ]\r\n                        }))\r\n                    }\r\n                ]\r\n            }}\r\n          />\r\n      );\r\n};\r\n\r\nfunction formatStockData(stockData) {\r\n    return Object.entries(stockData).map(entries =>{\r\n        const [date, priceData] = entries;\r\n\r\n        return {\r\n            date, \r\n            open: Number(priceData['1. open']),\r\n            high: Number(priceData['2. high']),\r\n            low: Number(priceData['3. low']),\r\n            close: Number(priceData['4. close'])\r\n        }\r\n    });\r\n}\r\n\r\nexport default Chart ;","import React, { useEffect } from 'react'\nimport { getDailyChartForSymbol } from './ApiConnector';\nimport Chart from './Chart';\n\nconst App = () => {\n\n  return (\n    <div style = { { display: 'flex', justifyContent : 'center'}}>\n      <div style = { { width : '70%'}}>\n        <Chart />\n      </div>\n    </div>\n  );\n};\n\nexport default App ;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}